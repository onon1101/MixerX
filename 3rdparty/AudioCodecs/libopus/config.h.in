/* config.h.in.  Generated from configure.ac by autoheader.  */

/* Get CPU Info by asm method */
#cmakedefine CPU_INFO_BY_ASM @CPU_INFO_BY_ASM@

/* Get CPU Info by c method */
#cmakedefine CPU_INFO_BY_C @CPU_INFO_BY_C@

/* Custom modes */
#cmakedefine CUSTOM_MODES @CUSTOM_MODES@

/* Do not build the float API */
#cmakedefine DISABLE_FLOAT_API @DISABLE_FLOAT_API@

/* Disable bitstream fixes from RFC 8251 */
#cmakedefine DISABLE_UPDATE_DRAFT @DISABLE_UPDATE_DRAFT@

/* Assertions */
#cmakedefine ENABLE_ASSERTIONS @ENABLE_ASSERTIONS@

/* Ambisonics Support */
#cmakedefine ENABLE_EXPERIMENTAL_AMBISONICS @ENABLE_EXPERIMENTAL_AMBISONICS@

/* Hardening */
#cmakedefine ENABLE_HARDENING @ENABLE_HARDENING@

/* Debug fixed-point implementation */
#cmakedefine FIXED_DEBUG @FIXED_DEBUG@

/* Compile as fixed-point (for machines without a fast enough FPU) */
#cmakedefine FIXED_POINT @FIXED_POINT@

/* Float approximations */
#cmakedefine FLOAT_APPROX @FLOAT_APPROX@

/* Fuzzing */
#cmakedefine FUZZING @FUZZING@

/* Define to 1 if you have the <alloca.h> header file. */
#cmakedefine HAVE_ALLOCA_H @HAVE_ALLOCA_H@

/* NE10 library is installed on host. Make sure it is on target! */
#cmakedefine HAVE_ARM_NE10 @HAVE_ARM_NE10@

/* Define to 1 if you have the <dlfcn.h> header file. */
#cmakedefine HAVE_DLFCN_H @HAVE_DLFCN_H@

/* Define to 1 if you have the <inttypes.h> header file. */
#cmakedefine HAVE_INTTYPES_H @HAVE_INTTYPES_H@

/* Define to 1 if you have the `lrint' function. */
#cmakedefine HAVE_LRINT @HAVE_LRINT@

/* Define to 1 if you have the `lrintf' function. */
#cmakedefine HAVE_LRINTF @HAVE_LRINTF@

/* Define to 1 if you have the <memory.h> header file. */
#cmakedefine HAVE_MEMORY_H @HAVE_MEMORY_H@

/* Define to 1 if you have the <stdint.h> header file. */
#cmakedefine HAVE_STDINT_H @HAVE_STDINT_H@

/* Define to 1 if you have the <stdlib.h> header file. */
#cmakedefine HAVE_STDLIB_H @HAVE_STDLIB_H@

/* Define to 1 if you have the <strings.h> header file. */
#cmakedefine HAVE_STRINGS_H @HAVE_STRINGS_H@

/* Define to 1 if you have the <string.h> header file. */
#cmakedefine HAVE_STRING_H @HAVE_STRING_H@

/* Define to 1 if you have the <sys/stat.h> header file. */
#cmakedefine HAVE_SYS_STAT_H @HAVE_SYS_TYPES_H@

/* Define to 1 if you have the <sys/types.h> header file. */
#cmakedefine HAVE_SYS_TYPES_H @HAVE_SYS_TYPES_H@

/* Define to 1 if you have the <unistd.h> header file. */
#cmakedefine HAVE_UNISTD_H @HAVE_UNISTD_H@

/* Define to 1 if you have the `__malloc_hook' function. */
#cmakedefine HAVE___MALLOC_HOOK @HAVE___MALLOC_HOOK@

/* Define to the sub-directory where libtool stores uninstalled libraries. */
#cmakedefine LT_OBJDIR @LT_OBJDIR@

/* Make use of ARM asm optimization */
#cmakedefine OPUS_ARM_ASM @OPUS_ARM_ASM@

/* Use generic ARMv4 inline asm optimizations */
#cmakedefine OPUS_ARM_INLINE_ASM @OPUS_ARM_INLINE_ASM@

/* Use ARMv5E inline asm optimizations */
#cmakedefine OPUS_ARM_INLINE_EDSP @OPUS_ARM_INLINE_EDSP@

/* Use ARMv6 inline asm optimizations */
#cmakedefine OPUS_ARM_INLINE_MEDIA @OPUS_ARM_INLINE_MEDIA@

/* Use ARM NEON inline asm optimizations */
#cmakedefine OPUS_ARM_INLINE_NEON @OPUS_ARM_INLINE_NEON@

/* Define if assembler supports EDSP instructions */
#cmakedefine OPUS_ARM_MAY_HAVE_EDSP @OPUS_ARM_MAY_HAVE_EDSP@

/* Define if assembler supports ARMv6 media instructions */
#cmakedefine OPUS_ARM_MAY_HAVE_MEDIA @OPUS_ARM_MAY_HAVE_MEDIA@

/* Define if compiler supports NEON instructions */
#cmakedefine OPUS_ARM_MAY_HAVE_NEON @OPUS_ARM_MAY_HAVE_NEON@

/* Compiler supports ARMv7/Aarch64 Neon Intrinsics */
#cmakedefine OPUS_ARM_MAY_HAVE_NEON_INTR @OPUS_ARM_MAY_HAVE_NEON_INTR@

/* Define if binary requires Aarch64 Neon Intrinsics */
#cmakedefine OPUS_ARM_PRESUME_AARCH64_NEON_INTR @OPUS_ARM_PRESUME_AARCH64_NEON_INTR@

/* Define if binary requires EDSP instruction support */
#cmakedefine OPUS_ARM_PRESUME_EDSP @OPUS_ARM_PRESUME_EDSP@

/* Define if binary requires ARMv6 media instruction support */
#cmakedefine OPUS_ARM_PRESUME_MEDIA @OPUS_ARM_PRESUME_MEDIA@

/* Define if binary requires NEON instruction support */
#cmakedefine OPUS_ARM_PRESUME_NEON @OPUS_ARM_PRESUME_NEON@

/* Define if binary requires NEON intrinsics support */
#cmakedefine OPUS_ARM_PRESUME_NEON_INTR @OPUS_ARM_PRESUME_NEON_INTR@

/* This is a build of OPUS */
#define OPUS_BUILD

/* Run bit-exactness checks between optimized and c implementations */
#cmakedefine OPUS_CHECK_ASM @OPUS_CHECK_ASM@

/* Use run-time CPU capabilities detection */
#cmakedefine OPUS_HAVE_RTCD @OPUS_HAVE_RTCD@

/* Compiler supports X86 AVX Intrinsics */
#cmakedefine OPUS_X86_MAY_HAVE_AVX @OPUS_X86_MAY_HAVE_AVX@

/* Compiler supports X86 SSE Intrinsics */
#cmakedefine OPUS_X86_MAY_HAVE_SSE @OPUS_X86_MAY_HAVE_SSE@

/* Compiler supports X86 SSE2 Intrinsics */
#cmakedefine OPUS_X86_MAY_HAVE_SSE2 @OPUS_X86_MAY_HAVE_SSE2@

/* Compiler supports X86 SSE4.1 Intrinsics */
#cmakedefine OPUS_X86_MAY_HAVE_SSE4_1 @OPUS_X86_MAY_HAVE_SSE4_1@

/* Define if binary requires AVX intrinsics support */
#cmakedefine OPUS_X86_PRESUME_AVX @OPUS_X86_PRESUME_AVX@

/* Define if binary requires SSE intrinsics support */
#cmakedefine OPUS_X86_PRESUME_SSE @OPUS_X86_PRESUME_SSE@

/* Define if binary requires SSE2 intrinsics support */
#cmakedefine OPUS_X86_PRESUME_SSE2 @OPUS_X86_PRESUME_SSE2@

/* Define if binary requires SSE4.1 intrinsics support */
#cmakedefine OPUS_X86_PRESUME_SSE4_1 @OPUS_X86_PRESUME_SSE4_1@

/* Define to the address where bug reports for this package should be sent. */
#define PACKAGE_BUGREPORT "<see readme!>"

/* Define to the full name of this package. */
#cmakedefine PACKAGE_NAME @PACKAGE_NAME@

/* Define to the full name and version of this package. */
#cmakedefine PACKAGE_STRING @PACKAGE_STRING@

/* Define to the one symbol short name of this package. */
#define PACKAGE_TARNAME "<see readme!>"

/* Define to the home page for this package. */
#define PACKAGE_URL "<see readme!>"

/* Define to the version of this package. */
#cmakedefine PACKAGE_VERSION @PACKAGE_VERSION@

/* Define to 1 if you have the ANSI C header files. */
#cmakedefine STDC_HEADERS @STDC_HEADERS@

/* Make use of alloca */
#cmakedefine USE_ALLOCA @USE_ALLOCA@

/* Use C99 variable-size arrays */
#cmakedefine VAR_ARRAYS @VAR_ARRAYS@

/* Define to empty if `const' does not conform to ANSI C. */
#cmakedefine const

/* Define to `__inline__' or `__inline' if that's what the C compiler
   calls it, or to nothing if 'inline' is not supported under any name.  */
#ifndef __cplusplus
#cmakedefine inline @inline@
#endif

/* Define to the equivalent of the C99 'restrict' keyword, or to
   nothing if this is not supported.  Do not define if restrict is
   supported directly.  */
#cmakedefine restrict @restrict@
/* Work around a bug in Sun C++: it does not support _Restrict or
   __restrict__, even though the corresponding Sun C compiler ends up with
   "#define restrict _Restrict" or "#define restrict __restrict__" in the
   previous line.  Perhaps some future version of Sun C++ will work with
   restrict; if so, hopefully it defines __RESTRICT like Sun C does.  */
#if defined __SUNPRO_CC && !defined __RESTRICT
# define _Restrict
# define __restrict__
#endif

#ifdef _MSC_VER
#   if defined(_M_IX86) || defined(_M_X64)
/* Can always compile SSE intrinsics (no special compiler flags necessary) */
#       define OPUS_X86_MAY_HAVE_SSE
#       define OPUS_X86_MAY_HAVE_SSE2
#       define OPUS_X86_MAY_HAVE_SSE4_1

/* Presume SSE functions, if compiled to use SSE/SSE2/AVX (note that AMD64 implies SSE2, and AVX
   implies SSE4.1) */
#       if defined(_M_X64) || (defined(_M_IX86_FP) && (_M_IX86_FP >= 1)) || defined(__AVX__)
#           define OPUS_X86_PRESUME_SSE 1
#       endif
#       if defined(_M_X64) || (defined(_M_IX86_FP) && (_M_IX86_FP >= 2)) || defined(__AVX__)
#           define OPUS_X86_PRESUME_SSE2 1
#       endif
#       if defined(__AVX__)
#           define OPUS_X86_PRESUME_SSE4_1 1
#       endif

#       if !defined(OPUS_X86_PRESUME_SSE4_1) || !defined(OPUS_X86_PRESUME_SSE2) || !defined(OPUS_X86_PRESUME_SSE)
#           define OPUS_HAVE_RTCD 1
#       endif

#   endif
#endif
